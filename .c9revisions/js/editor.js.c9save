{"ts":1359551553124,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var editor = (function() {\n\n\tvar headerField, contentField, cleanSlate, textOptions, boldButton, italicButton, lastType;\n\n\tfunction init() {\n\n\t\tlastRange = 0;\n\t\tbindElements();\n\t\t\n\t\t// Something is being passed via URL\n\t\tif ( !isCleanSlate() ) {\n\n\t\t\tinflate( window.location.hash.substr(1) );\n\n\t\t} else {\n\n\t\t\t// Set caret start position\n\t\t\tvar range = document.createRange();\n\t\t\tvar selection = window.getSelection();\n\t\t\trange.setStart(headerField, 1);\n\t\t\tselection.removeAllRanges();\n\t\t\tselection.addRange(range);\n\t\t}\n\n\t\t// Local saving if supported and user is on the root domain\n\t\tif ( supportsHtmlStorage() && isCleanSlate() ) {\n\n\t\t\tloadState();\n\t\t\tdocument.onkeyup = function() {\n\t\t\t\tcheckTextHighlighting();\n\t\t\t\tsaveState();\n\t\t\t}\n\n\t\t} else {\n\t\t\tdocument.onkeyup = checkTextHighlighting;\n\t\t}\n\n\t\tdocument.onmousedown = checkTextHighlighting;\n\n\t\t// Debounce mouse up event.\n\t\tdocument.onmouseup = function( event ) {\n\n\t\t\tsetTimeout( function() {\n\t\t\t\tcheckTextHighlighting();\n\t\t\t}, 1);\n\t\t};\n\t}\n\n\tfunction checkTextHighlighting( event ) {\n\n\t\tvar selection = window.getSelection();\n\n\t\t// Check selections exist\n\t\tif ( selection.isCollapsed === true && lastType === false ) {\n\n\t\t\tonSelectorBlur();\n\t\t}\n\t\t\n\t\t// Text is selected\n\t\tif ( selection.isCollapsed === false && hasNode( findNodes( selection.focusNode ), 'ARTICLE' ) ) {\n\n\t\t\t// Find if highlighting is in the editable area\n\t\t\tvar range = selection.getRangeAt(0);\n\t\t\tvar boundary = range.getBoundingClientRect();\n\t\t\t\n\t\t\t// Insert\n\t\t\ttextOptions.style.top = boundary.top - 5 + document.body.scrollTop + \"px\";\n\t\t\ttextOptions.style.left = (boundary.left + boundary.right)/2 + \"px\";\n\t\t}\n\n\t\tlastType = selection.isCollapsed;\n\n\t}\n\n\tfunction onSelectorBlur() {\n\t\t\n\t\ttextOptions.style.top = '-999px';\n\t\ttextOptions.style.left = '-999px';\n\t}\n\n\tfunction findNodes( element ) {\n\n\t\tvar nodeNames = [];\n\n\t\twhile ( element.parentNode ) {\n\n\t\t\tnodeNames.push( element.nodeName );\n\t\t\telement = element.parentNode;\n\t\t}\n\n\t\treturn nodeNames;\n\t}\n\n\tfunction hasNode( nodeList, name ) {\n\n\t\tvar i;\n\t\tfor( i = 0; i < nodeList.length; i++ ) {\n\t\t\tif ( nodeList[i] === name ){\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction saveState( event ) {\n\t\t\n\t\tlocalStorage[ 'header' ] = headerField.innerHTML;\n\t\tlocalStorage[ 'content' ] = contentField.innerHTML;\n\t}\n\n\tfunction loadState() {\n\n\t\tif ( localStorage[ 'header' ] ) {\n\n\t\t\theaderField.innerHTML = localStorage[ 'header' ];\n\t\t\tcontentField.innerHTML = localStorage[ 'content' ];\n\t\t}\n\t}\n\n\tfunction bindElements() {\n\n\t\theaderField = document.querySelector( '.header' );\n\t\tcontentField = document.querySelector( '.content' );\n\t\ttextOptions = document.querySelector( '.text-options' );\n\n\t\tboldButton = textOptions.querySelector( '.bold' );\n\t\tboldButton.onclick = onBoldClick;\n\n\t\titalicButton = textOptions.querySelector( '.italic' );\n\t\titalicButton.onclick = onItalicClick;\n\n\t\tquoteButton = textOptions.querySelector( '.quote' );\n\t\tquoteButton.onclick = onQuoteClick;\n\t}\n\n\tfunction onBoldClick() {\n\t\tdocument.execCommand( 'bold', false );\n\t}\n\n\tfunction onItalicClick() {\n\t\tdocument.execCommand( 'italic', false );\n\t}\n\n\tfunction onQuoteClick() {\n\n\t\tvar nodeNames = findNodes( window.getSelection().focusNode );\n\t\t\n\t\tif ( hasNode( nodeNames, 'BLOCKQUOTE' ) ) {\n\t\t\tdocument.execCommand( 'formatBlock', false, 'p' );\n\t\t} else {\n\t\t\tdocument.execCommand( 'formatBlock', false, 'blockquote' );\n\t\t}\n\t}\n\n\tfunction inflate( string ) {\n\n\t\t// Seperate header and content\n\t\tvar stringData = string.split( '#' );\n\n\t\t// Set contents from URL\n\t\theaderField.innerHTML = RawDeflate.inflate( window.atob( stringData[0] ) );\n\t\tcontentField.innerHTML = RawDeflate.inflate( window.atob( stringData[1] ) );\n\t}\n\n\tfunction deflate() {\n\n\t\tvar deflatedHeader, deflatedContent;\n\n\t\tdeflatedHeader = window.btoa( RawDeflate.deflate( headerField.innerHTML ) );\n\t\tdeflatedContent = window.btoa( RawDeflate.deflate( contentField.innerHTML ) );\n\t\treturn deflatedHeader + '#' + deflatedContent;\n\t}\n\n\tfunction getWordCount() {\n\t\treturn get_text(contentField).split(/\\s+/).length;\n\t}\n\n\treturn {\n\t\tinit: init,\n\t\tdeflate: deflate,\n\t\tsaveState: saveState,\n\t\tgetWordCount: getWordCount\n\t}\n\n})();"]],"start1":0,"start2":0,"length1":0,"length2":4134}]],"length":4134}
